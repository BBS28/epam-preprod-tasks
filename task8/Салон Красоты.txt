салон Красоты

Система реализует расписание работы сотрудников салона красоты. Существуют роли: Гость, Клиент Администратор Мастер.
Гость может видеть каталог услуг и список мастеров салона с учетом по:
- по имени мастера;
- по рейтингу мастеров
может осуществлять фильтрацию:
- по определенным мастером;
- по услугами.
Клиент (авторизованный пользователь) может записаться на определенную услугу, которую предоставляет мастер, и на определенный таймслот.
Администратор может:
- просматривать заявки клиентов и менять выбранный таймслот;
- отменять запись;
- принимать оплату услуги.
Мастер видит свое расписание (занятые и свободные таймслоты) и отмечает выполнения заказа.
После оказания услуг Клиент оставляет отзыв. Предложение об отзыве приходит на электронную почту Клиента на следующий день после предоставления услуги.


ОПИСАНИЕ ПРОЕКТА
Задача финального проекта - разработать веб-приложение, поддерживающее функциональность в соответствии с
варианта задачи.
Требования к реализации:
1. На основе сущностей предметной области создать классы, которые им соответствуют.
2. Классы и методы должны иметь названия, отражающие их функциональность, и должны быть
разнесены по пакетам.
3. Оформление кода должна соответствовать Java Code Convention.
4. Информацию о предметной области хранить в реляционной базе данных (в качестве СУБД
рекомендуется использовать MySQL или PostgreSQL).
5. Для доступа к данным использовать JDBC API с использованием готового или
разработанного самостоятельно пула соединений.
НЕ допускается использование ORM фреймворков
6. Приложение должно поддерживать работу с кириллицей (быть многоязычным), в том числе при
хранении информации в базе данных:
a. должна быть возможность переключения языка интерфейса;
b. должна быть поддержка ввода, вывода и хранения информации (в базе данных),
записанной на разных языках;
c. в качестве языков выбрать минимум две: одна на основе кириллицы (украинский или русский),
другая на основе латиницы (английский).
7. Архитектура приложений должна соответствовать шаблона MVC.
НЕ допускается использование MVC-фреймворков
8. При реализации бизнес-логики необходимо использовать шаблоны проектирования: Команда,
Стратегия Фабрика Строитель Синглтон, Фронт-контроллер, Наблюдатель, Адаптер и др.
Использование шаблонов должно быть обоснованным
9. Используя сервлеты и JSP, реализовать функциональность, приведенную в постановке
Задание.
10. Использовать Apache Tomcat в качестве контейнера сервлетов.
11. На страницах JSP применять теги из библиотеки JSTL и разработаны собственные тэги (минимум: один
тег custom tag library и один тег tag file).
12. Реализовать защиту от повторной отправки данных на сервер при обновлении страницы
(Реализовать PRG).
13. При разработке использовать сессии, фильтры, слушатели.
14. В приложении должны быть реализованы аутентификация и авторизация, разграничение прав
доступа пользователей системы к компонентам программы. Шифрования паролей поощряется.
15. Внедрить в проект журнал событий с использованием библиотеки log4j.
16. Код должен содержать комментарии документации (все классы верхнего уровня, нетривиальные методы
и конструкторы).
17. Приложение должно быть покрытым модульными тестами (минимальный процент покрытия 40%).
Написание интеграционных тестов поощряются.
18. Реализовать механизм пагинации страниц с данными.
19. Все поля ввода должны быть с валидацией данных.
20. Приложение имеет корректно реагировать на ошибки и исключительные ситуации разного рода (конечный
пользователь не должен видеть stack trace на стороне клиента).
21. Самостоятельное расширение постановки задачи по функциональности поощряется! (добавление
капчи, формирование отчетов в различных форматах и ​​т.д.)
22. Использование HTML, CSS, JS фреймворков для интерфейса (Bootstrap, Materialize,
др.) поощряется!
За три дня до момента старта защит проектов (интервью) необходимо подготовить в
виде отдельного файла схему базы данных, а также предоставить ссылку на репозиторий с
ПРОЕКТОМ